{
  "if err != nil": {
    "prefix": "err",
    "body": "if err != nil {\n\t${1:return ${2:nil, }${3:err}}\n}",
    "description": "Snippet for if err != nil"
  },
  "for range statement": {
    "prefix": "forr",
    "body": "for ${1:_, }${2:v} := range ${3:v} {\n\t$0\n}",
    "description": "Snippet for a for range loop"
  },
  "log v": {
    "prefix": "lv",
    "body": "log.Printf(\"${1:_}: %#+v\", ${1:_})",
    "description": "Log value by verbose"
  },
  "type struct declaration": {
    "prefix": "tys",
    "body": "type ${1:name} struct {\n\t$0\n}",
    "description": "Snippet for a struct declaration"
  },
  "http ResponseWriter *Request": {
    "prefix": "wr",
    "body": "${1:w} http.ResponseWriter, ${2:r} *http.Request",
    "description": "Snippet for http Response"
  },
  "http.HandleFunc": {
    "prefix": "hf",
    "body": "${1:http}.HandleFunc(\"${2:/}\", ${3:handler})",
    "description": "Snippet for http.HandleFunc()"
  },
  "goroutine anonymous function": {
    "prefix": "go",
    "body": "go func($1) {\n\t$0\n}($2)",
    "description": "Snippet for anonymous goroutine declaration"
  },
  "method declaration": {
    "prefix": "meth",
    "body": "func (${1:receiver} ${2:type}) ${3:method}($4) $5 {\n\t$0\n}",
    "description": "Snippet for method declaration"
  }
}
